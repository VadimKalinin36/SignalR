@model IEnumerable<WebChat.Models.HistoryModel>

<html>
    <head>
        <meta charset="utf-8">
    </head>
    <body> 
        <div class = "container">
            <div class="row">
                <div class="col">
                    <div id="header"></div>

                    <div id="userNameBlock">
                        Введите логин:<br />
                        <input id="userName" type="text" />
                        <input id="loginBtn" type="button" value="Установить" />
                    </div>
                    <br />


                    <div id="inputForm">
                        <input type="text" id="message" />
                        <input type="button" id="sendBtn" value="Отправить" />
                        <input id="OutBtn" type="button" value="Вернуться в общий чат" />

                    </div>

                    <div id="online"></div>

                    <div id="chatroom"></div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <table class="table table-hover" "table table-sm">
                        <thead>
                            <tr>
                                <th>Отправитель</th>
                                <th>Текст сообщения</th>
                                <th>Время отправки</th>

                            </tr>
                        </thead>
                        <tbody>
                            @{
                                if (Model != null)
                                {
                                    foreach (var input in Model)
                                    {
                                        <tr>
                                            <td> @input.Sender</td>
                                            <td> @input.MessageText</td>
                                            <td> @input.DateSend</td>
                                        </tr>
                                    }
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </body>
</html>





<script>
    let peerConnectionId = null;
    const hubConnection = new signalR.HubConnectionBuilder()
        .withUrl("/chat")
        .build();

    let userName = "";

    hubConnection.on("SendMessage", function (message, userName, connectionId) {
        let mes = `<p><b class="inviteButton" data-id="${connectionId}">${userName + ": "}</b> <span>${message}</span><p>`;
        $("#chatroom").append(mes);
    });
    // установка имени пользователя
    document.getElementById("loginBtn").addEventListener("click", function (e) {
        $(this).hide();
        userName = document.getElementById("userName").value;
        document.getElementById("header").innerHTML = "<h3>Welcome, " + userName + "!</h3>";
        hubConnection.invoke("Enter", userName);

    });
    // отправка сообщения от простого пользователя
    document.getElementById("sendBtn").addEventListener("click", function (e) {
        let message = document.getElementById("message").value;
        hubConnection.invoke("CreateMessage", message, userName, peerConnectionId);
    });
    hubConnection.on("Notify", function (message) {
        // создает элемент <p> для сообщения пользователя
        let elem = document.createElement("p");
        elem.appendChild(document.createTextNode(message));
        var firstElem = document.getElementById("chatroom").firstChild;
        document.getElementById("chatroom").insertBefore(elem, firstElem);
    });
    hubConnection.on("SendInvite", function (inviterConnectionId) {
        peerConnectionId = inviterConnectionId;
        const elem = $('p[data-id="' + inviterConnectionId + '"]');
        //elem.find('.connection').css('font-weight', 700);
        //elem.find('button').hide();
    });
    hubConnection.on("updateOnline", function (data) {
        $('#online').empty();
        $.each(data, function (userName) {
            if (userName == hubConnection.connectionId) {
                $('#online').append("<p>" + userName + " (это я)</p>");
            }
            else {
                $('#online').append("<p data-id='" + userName + "'><span class='connection'>" + userName + "</span> (<button class='inviteButton' data-id='" + userName + "'>пригласить</button>)</p>");
            }
        })
    });
    hubConnection.start();
    $(function () {
        $(document).on('click', '.inviteButton', function () {
            const connectionId = $(this).data('id');
            peerConnectionId = connectionId;
            $(this).hide();
            $(this).closest('p').find('.connection').css('font-weight', 700);
            hubConnection.invoke("Invite", connectionId);
        });
    });
    document.getElementById("OutBtn").addEventListener("click", function () {
        peerConnectionId = null;
    })
</script>

@*    hubConnection.on("updateOnline", function (data) {
        $('#online').empty();
        $.each(data, function (key, value) {
            if (value == hubConnection.connectionId) {
                $('#online').append("<p>" + value + " (это я)</p>");
            }
            else{
                $('#online').append("<p data-id='" + value + "'><span class='connection'>" + value + "</span> (<button class='inviteButton' data-id='" + value + "'>пригласить</button>)</p>");
            }
        })
    });
    *@


@*
    hubConnection.on("SendInvite", function (inviterConnectionId) {
        peerConnectionId = inviterConnectionId;
        const elem = $('p[data-id="' + inviterConnectionId + '"]');
        elem.find('.connection').css('font-weight', 700);
        elem.find('button').hide();
    });
    document.getElementById("sendBtn").addEventListener("click", function (e) {
        let message = document.getElementById("message").value;
        hubConnection.invoke("CreateMessage", message, peerConnectionId);
    });
*@
